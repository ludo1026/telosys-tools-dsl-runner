##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
##--------------------------------------------------------------------------------------------------------
/*
 * Java bean class
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.io.Serializable;

#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

/**
 * Entity bean
 *
 * @author Telosys Tools Generator
 *
 */
@Document(collection = "${fn.uncapitalize($entity.name)}")
public class $entity.name implements Serializable
{
    private static final long serialVersionUID = 1L;

#foreach( $field in $entity.keyAttributes )
    @Id
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end; // Primary Key
#end

#foreach( $field in $dataFields )
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

    /**
     * Default constructor
     */
    public ${entity.name}()
    {
        super();
    }
#foreach( $field in $entity.keyAttributes )
    #if ( $field.setter )

    /**
     * Set the "$field.name" field value
     * @param $field.name
     */
    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name ;
    }
    #end
    #if ( $field.getter )

    /**
     * Get the "$field.name" field value
     * @return the field value
     */
    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
    #end
#end
#foreach( $field in $dataFields )
    #if ( $field.setter )

    /**
     * Set the "$field.name" field value
     * @param $field.name
     */
    public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name;
    }
    #end
    #if ( $field.getter )

    /**
     * Get the "$field.name" field value
     * @return the field value
     */
    public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
    #end
#end

$java.toStringMethod($entity, 4)

}
